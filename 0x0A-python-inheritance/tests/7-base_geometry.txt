>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 11, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: name must be an integer
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 13, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: age must be greater than 0
>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 13, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: distance must be greater than 0
>>> bg.integer_validator("distance", float('inf'))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 11, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: distance must be an integer
>>> bg.integer_validator("distance", float('nan'))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 11, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: distance must be an integer
>>> bg.integer_validator("distance")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() missing 1 required positional argument: 'value'
>>> bg.integer_validator(12, 12)
>>> bg.integer_validator("s", 10/0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero
>>> bg.integer_validator(12)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() missing 1 required positional argument: 'value'
>>> bg.integer_validator("", 12)
>>> bg.integer_validator(str("2"), 12)
>>> bg.integer_validator("s", int(float('inf')))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
OverflowError: cannot convert float infinity to integer
>>> bg.integer_validator("s", int(float('nan')))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: cannot convert float NaN to integer

